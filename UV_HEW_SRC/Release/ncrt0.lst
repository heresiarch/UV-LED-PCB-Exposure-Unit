* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Mon Aug 01 23:27:28 2011  PAGE 001

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

     1                                  ;*************************************************************************** ;
     2                                  ; C COMPILER for R8C/Tiny, M16C/60,30,20,10
     3                                  ; Copyright(C) 1999(2000-2004). Renesas Technology Corp.
     4                                  ; and Renesas Solutions Corp., All rights reserved.
     5                                  ;
     6                                  ;
     7                                  ; ncrt0.a30 : NC30 startup program
     8                                  ;
     9                                  ; This program is applicable when using the basic I/O library
    10                                  ;       
    11                                  ; $Id: ncrt0.a30,v 1.27.4.4 2004/10/29 14:06:38 simomura Exp $
    12                                  ;
    13                                  ;***************************************************************************
    14                                  
    15                                  ;--------------------------------------------------------------------
    16                                  ; set size of monitor area for FoUSB
    17                                  ;--------------------------------------------------------------------
    18                                  .if	_KD_
    19                            X     .if	_Firmware_space == 0
    20                            X     .else
    21                            X     .endif
    22                                  .endif
    23                                  ;---------------------------------------------------------------------
    24                                  ; HEEP SIZE definition
    25                                  ;---------------------------------------------------------------------
    26                                  .if	__HEAP__ == 1 
    27                                  .else
    28                                  
    29                                  .if	__HEAPSIZE__ == 0
    30  00000300h                       HEAPSIZE	.equ	300H
    31                                  .else
    32                                  .endif
    33                                  
    34                                  .endif
    35                                  
    36                                  ;---------------------------------------------------------------------
    37                                  ; STACK SIZE definition
    38                                  ;---------------------------------------------------------------------
    39                                  .if	__USTACKSIZE__ == 0
    40                                  .if	__R8C__ != 1
    41                                  .else
    42  00000080h                       STACKSIZE	.equ	80h
    43                                  .endif
    44                                  .else
    45                                  .endif
    46                                  
    47                                  ;---------------------------------------------------------------------
    48                                  ; INTERRUPT STACK SIZE definition
    49                                  ;---------------------------------------------------------------------
    50                                  .if	__ISTACKSIZE__ == 0
    51                                  .if	__R8C__ != 1
    52                                  .else
    53  00000080h                       ISTACKSIZE	.equ	80h
    54                                  .endif
    55                                  .else
    56                                  .endif
    57                                  
    58                                  ;---------------------------------------------------------------------
    59                                  ; INTERRUPT VECTOR ADDRESS  definition
    60                                  ;---------------------------------------------------------------------
    61                                  .if	__R8C__ != 1
    62                            X     .if	_KD_ == 1
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Mon Aug 01 23:27:28 2011  PAGE 002

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

    63                            X     .else
    64                            X     .endif // _KD_
    65                                  .else
    66  0000FEDCh                       VECTOR_ADR 	.equ	0fedch
    67                                  .endif
    68                                  
    69                                  ;---------------------------------------------------------------------
    70                                  ; Section allocation
    71                                  ;---------------------------------------------------------------------
    72                                  	.list OFF
    73                                  	.list ON
    74                                  
    75                                  ;---------------------------------------------------------------------
    76                                  ; SBDATA area definition
    77                                  ;---------------------------------------------------------------------
    78                                  	.glb	__SB__
    79  00000400h                       __SB__	.equ	data_SE_top
    80                                  
    81                                  ;====================================================================
    82                                  ; Initialize Macro declaration
    83                                  ;---------------------------------------------------------------------
    84                             D    N_BZERO	.macro	TOP_ ,SECT_
    85                             D    	mov.b	#00H, R0L
    86                             D    	mov.w	#(TOP_ & 0FFFFH), A1
    87                             D    	mov.w	#sizeof SECT_ , R3
    88                             D    	sstr.b	
    89                                  	.endm
    90                                  
    91                             D    N_BCOPY .macro	FROM_,TO_,SECT_
    92                             D    	mov.w	#(FROM_ & 0FFFFH),A0
    93                             D    	mov.b	#(FROM_ >>16),R1H
    94                             D    	mov.w	#TO_ ,A1
    95                             D    	mov.w	#sizeof SECT_ , R3
    96                             D    	smovf.b
    97                                  	.endm
    98                                  
    99                             D    BZERO	.macro	TOP_,SECT_
   100                             D    	push.w	#sizeof SECT_ >> 16
   101                             D    	push.w	#sizeof SECT_  & 0ffffh
   102                             D    	pusha	TOP_ >>16
   103                             D    	pusha	TOP_ & 0ffffh
   104                             D    	.stk	8
   105                             D    	.glb	_bzero	
   106                             D    	.call	_bzero,G
   107                             D    	jsr.a	_bzero
   108                                  	.endm
   109                                  
   110                             D    BCOPY	.macro	FROM_ ,TO_ ,SECT_
   111                             D    	push.w	#sizeof SECT_  >> 16
   112                             D    	push.w	#sizeof SECT_  & 0ffffh
   113                             D    	pusha	TO_ >>16
   114                             D    	pusha	TO_  & 0ffffh
   115                             D    	pusha	FROM_ >>16
   116                             D    	pusha	FROM_  & 0ffffh
   117                             D    	.stk	12
   118                             D    	.glb	_bcopy
   119                             D    	.call   _bcopy,G
   120                             D    	jsr.a	_bcopy
   121                                  	.endm
   122                                  
   123                                  .if	__R8C__ != 1
   124                            X     .if __HEAP__ != 1
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Mon Aug 01 23:27:28 2011  PAGE 003

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

   125                            X     .endif
   126                                  .else	; __R8C__
   127                                  
   128                                  ;---------------------------------------------------------------------
   129                                  ; for R8C/Tiny
   130                                  ;---------------------------------------------------------------------
   131                                  
   132                                  ;====================================================================
   133                                  ; Interrupt section start
   134                                  ;---------------------------------------------------------------------
   135                                  	.insf	start,S,0
   136                                  	.glb	start
   137                                  	.section	interrupt
   138  00000                           start:
   139                                  ;---------------------------------------------------------------------
   140                                  ; after reset,this program will start
   141                                  ;---------------------------------------------------------------------
   142  00000  EB400000r                	ldc	#istack_top,	isp	;set istack pointer
   143  00004  C7020A00              S  	mov.b	#02h,0ah
   144  00008  B70400                Z  	mov.b	#00h,04h		;set processer mode 
   145  0000B  B70A00                Z  	mov.b	#00h,0ah
   146  0000E  EB308000                 	ldc	#0080h,	flg
   147  00012  EB500000r                	ldc	#stack_top,	sp	;set stack pointer 
   148  00016  EB600004                 	ldc	#data_SE_top,	sb	;set sb register 
   149  0001A  EB200000                 	ldintb	#VECTOR_ADR
               EB10DCFE 
   150                                  
   151                                  ;====================================================================
   152                                  ; NEAR area initialize.
   153                                  ;--------------------------------------------------------------------
   154                                  ; bss zero clear
   155                                  ;--------------------------------------------------------------------
   156                                  	N_BZERO	bss_SE_top,bss_SE
   157  00022  B4                  M Z  	mov.b	#00H, R0L
   158  00023  AA0000r             M S  	mov.w	#(bss_SE_top & 0FFFFH), A1
   159  00026  75C30000r           M    	mov.w	#sizeof bss_SE , R3
   160  0002A  7CEA                M    	sstr.b	
   161                             M    	.endm
   162                                  	N_BZERO	bss_SO_top,bss_SO
   163  0002C  B4                  M Z  	mov.b	#00H, R0L
   164  0002D  AA0000r             M S  	mov.w	#(bss_SO_top & 0FFFFH), A1
   165  00030  75C30000r           M    	mov.w	#sizeof bss_SO , R3
   166  00034  7CEA                M    	sstr.b	
   167                             M    	.endm
   168                                  	N_BZERO	bss_NE_top,bss_NE
   169  00036  B4                  M Z  	mov.b	#00H, R0L
   170  00037  AA0000r             M S  	mov.w	#(bss_NE_top & 0FFFFH), A1
   171  0003A  75C30000r           M    	mov.w	#sizeof bss_NE , R3
   172  0003E  7CEA                M    	sstr.b	
   173                             M    	.endm
   174                                  	N_BZERO	bss_NO_top,bss_NO
   175  00040  B4                  M Z  	mov.b	#00H, R0L
   176  00041  AA0000r             M S  	mov.w	#(bss_NO_top & 0FFFFH), A1
   177  00044  75C30000r           M    	mov.w	#sizeof bss_NO , R3
   178  00048  7CEA                M    	sstr.b	
   179                             M    	.endm
   180                                  
   181                                  ;---------------------------------------------------------------------
   182                                  ; initialize data section
   183                                  ;---------------------------------------------------------------------
   184                                  	N_BCOPY data_SEI_top,data_SE_top,data_SE
   185  0004A  A20000r             M S  	mov.w	#(data_SEI_top & 0FFFFH),A0
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Mon Aug 01 23:27:28 2011  PAGE 004

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

   186  0004D  74C300r             M    	mov.b	#(data_SEI_top >>16),R1H
   187  00050  AA0004              M S  	mov.w	#data_SE_top ,A1
   188  00053  75C30000r           M    	mov.w	#sizeof data_SE , R3
   189  00057  7CE8                M    	smovf.b
   190                             M    	.endm
   191                                  	N_BCOPY	data_SOI_top,data_SO_top,data_SO
   192  00059  A20000r             M S  	mov.w	#(data_SOI_top & 0FFFFH),A0
   193  0005C  74C300r             M    	mov.b	#(data_SOI_top >>16),R1H
   194  0005F  AA0000r             M S  	mov.w	#data_SO_top ,A1
   195  00062  75C30000r           M    	mov.w	#sizeof data_SO , R3
   196  00066  7CE8                M    	smovf.b
   197                             M    	.endm
   198                                  	N_BCOPY	data_NEI_top,data_NE_top,data_NE
   199  00068  A20000r             M S  	mov.w	#(data_NEI_top & 0FFFFH),A0
   200  0006B  74C300r             M    	mov.b	#(data_NEI_top >>16),R1H
   201  0006E  AA0000r             M S  	mov.w	#data_NE_top ,A1
   202  00071  75C30000r           M    	mov.w	#sizeof data_NE , R3
   203  00075  7CE8                M    	smovf.b
   204                             M    	.endm
   205                                  	N_BCOPY	data_NOI_top,data_NO_top,data_NO
   206  00077  A20000r             M S  	mov.w	#(data_NOI_top & 0FFFFH),A0
   207  0007A  74C300r             M    	mov.b	#(data_NOI_top >>16),R1H
   208  0007D  AA0000r             M S  	mov.w	#data_NO_top ,A1
   209  00080  75C30000r           M    	mov.w	#sizeof data_NO , R3
   210  00084  7CE8                M    	smovf.b
   211                             M    	.endm
   212                                  
   213                                  ;====================================================================
   214                                  ; FAR area initialize.
   215                                  ;---------------------------------------------------------------------
   216                                  ; bss zero clear
   217                                  ;---------------------------------------------------------------------
   218                                  ;	BZERO	bss_FE_top,bss_FE
   219                                  ;	BZERO	bss_FO_top,bss_FO
   220                                  
   221                                  ;---------------------------------------------------------------------
   222                                  ; Copy edata_E(O) section from edata_EI(OI) section
   223                                  ;---------------------------------------------------------------------
   224                                  ;	BCOPY	data_FEI_top,data_FE_top,data_FE
   225                                  ;	BCOPY	data_FOI_top,data_FO_top,data_FO
   226                                  
   227  00086  EB500000r                	ldc	#stack_top,sp
   228                                  ;	.stk	-40
   229                                  
   230                                  ;====================================================================
   231                                  ; heap area initialize
   232                                  ;---------------------------------------------------------------------
   233                                  .if __HEAP__ != 1
   234                                  	.glb	__mbase
   235                                  	.glb	__mnext
   236                                  	.glb	__msize
   237  0008A  75CF0000r0000r           	mov.w	#(heap_top&0FFFFH), __mbase
   238  00090  75CF0000r0000r           	mov.w	#(heap_top&0FFFFH), __mnext
   239  00096  75CF0000r0003            	mov.w	#(HEAPSIZE&0FFFFH), __msize
   240                                  .endif
   241                                  
   242                                  ;====================================================================
   243                                  ; Initialize standard I/O
   244                                  ;---------------------------------------------------------------------
   245                                  ;.if __STANDARD_IO__ == 1
   246                                  ;	.glb	_init
   247                                  ;	.call	_init,G
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Mon Aug 01 23:27:28 2011  PAGE 005

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

   248                                  ;	jsr.a	_init
   249                                  ;.endif
   250                                  
   251                                  ;====================================================================
   252                                  ; Call main() function
   253                                  ;---------------------------------------------------------------------
   254  0009C  EB700000                 	ldc	#0h,fb	; for debuger
   255                                  
   256                                  	.glb	_main
   257  000A0  FD000000r             A  	jsr.a	_main
   258                                  
   259                                  .endif	; __R8C__
   260                                  
   261                                  ;====================================================================
   262                                  ; exit() function
   263                                  ;---------------------------------------------------------------------
   264                                  	.glb	_exit
   265                                  	.glb	$exit
   266  000A4                           _exit:			   ; End program
   267  000A4                           $exit:
   268  000A4  FEFF                  B  	jmp	_exit
   269                                  	.einsf
   270                                  ;====================================================================
   271                                  ; dummy interrupt function
   272                                  ;---------------------------------------------------------------------
   273                                  	.glb	dummy_int
   274  000A6                           dummy_int:
   275  000A6  FB                       	reit
   276                                  
   277                                  	.end

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00277   LINES

Section List

Attr        Size          Name
DATA     0000000(00000H)  data_SE
DATA     0000000(00000H)  bss_SE
DATA     0000000(00000H)  data_SO
DATA     0000000(00000H)  bss_SO
DATA     0000000(00000H)  data_NE
DATA     0000000(00000H)  bss_NE
DATA     0000000(00000H)  data_NO
DATA     0000000(00000H)  bss_NO
DATA     0000256(00100H)  stack
DATA     0000768(00300H)  heap
ROMDATA  0000000(00000H)  rom_NE
ROMDATA  0000000(00000H)  rom_NO
ROMDATA  0000000(00000H)  data_SEI
ROMDATA  0000000(00000H)  data_SOI
ROMDATA  0000000(00000H)  data_NEI
ROMDATA  0000000(00000H)  data_NOI
ROMDATA  0000000(00000H)  switch_table
CODE     0000000(00000H)  program
CODE     0000000(00000H)  interrupt
ROMDATA  0000256(00100H)  vector
ROMDATA  0000004(00004H)  fvector
CODE     0000167(000A7H)  interrupt
